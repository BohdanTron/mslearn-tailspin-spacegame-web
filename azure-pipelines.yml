trigger:
- '*'

pool:
  vmImage: ubuntu-latest

variables:
  releaseBranchName: 'release'
  appName: 'Tailspin.SpaceGame.Web'
  dotnetSdkVersion: '6.x'

stages:
  - stage: 'Build'
    displayName: 'Build the web application'
    jobs:
      - job: 'Build'
        displayName: 'Build job'
        pool:
          vmImage: 'ubuntu-20.04'
          demands: 
          - npm

        variables: 
          wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'

        steps:
        - task: Cache@2
          inputs:
            key: npm | $(Agent.OS) | package-lock.json
            path: $(Build.SourcesDirectory)/node_modules
            restoreKeys: |
              npm | $(Agent.OS)
          displayName: 'Restore node_modules from cache'

        - task: Npm@1
          displayName: 'Install dependencies with npm ci'
          inputs:
            command: 'ci'
            customCommand: '--no-audit --ignore-scripts --prefer-offline --progress=false'

        - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
          displayName: 'Compile Sass assets'

        - task: gulp@1
          displayName: 'Run gulp tasks'

        - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
          displayName: 'Write build info'
          workingDirectory: $(wwwrootDir)

        - template: templates/build-dotnet.yml
          parameters:
            dotnetSdkVersion: '$(dotnetSdkVersion)'

        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: drop

  - stage: 'Dev'
    displayName: 'Deploy to the dev environment'
    dependsOn: Build
    condition: |
      and
      (
        succeeded(),
        eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
      )
    jobs:
      - template: templates/deploy.yml
        parameters:
          deploymentName: DeployDev
          environment: dev
          webAppName: '$(WebAppNameDev)'
          appName: '$(appName)'

  - stage: 'Test'
    displayName: 'Deploy to the test environment'
    dependsOn: Dev
    jobs:
      - template: templates/deploy.yml
        parameters:
          deploymentName: DeployTest
          environment: test
          webAppName: '$(WebAppNameTest)'
          appName: '$(appName)'

      - template: templates/run-ui-tests.yml
        parameters:
          dependsOn: DeployTest
          dotnetSdkVersion: '$(dotnetSdkVersion)'
    
  - stage: 'Staging'
    displayName: 'Deploy to the staging environment'
    dependsOn: Test
    jobs:
      - template: templates/deploy.yml
        parameters:
          deploymentName: DeployStaging
          environment: staging
          webAppName: '$(WebAppNameStaging)'
          appName: '$(appName)'